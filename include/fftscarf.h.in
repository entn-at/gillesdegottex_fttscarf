/*! \file

How to call:
FFTPlanSingle
FFTPlanDouble
FFTPlan (will use the default precision given by FFTScarf (selected at FFTSarf compile time))
*/

#ifndef __FFTSCARF_H__
#define __FFTSCARF_H__

#define FFTSCARF_VERSION_MAJOR 1
#define FFTSCARF_VERSION_MINOR 1
#define FFTSCARF_VERSION_REVISION 0

#cmakedefine FFTSCARF_PRECISION_SINGLE
#cmakedefine FFTSCARF_PRECISION_DOUBLE
#cmakedefine FFTSCARF_PRECISION_LONGDOUBLE
#cmakedefine FFTSCARF_PRECISION_DEFAULT @FFTSCARF_PRECISION_DEFAULT@
#cmakedefine FFTSCARF_PLAN_PROTECTACCESS

#cmakedefine FFTSCARF_FFT_IPP
#cmakedefine FFTSCARF_FFT_FFTS
#cmakedefine FFTSCARF_FFT_PFFFT
#cmakedefine FFTSCARF_FFT_FFTW3
#cmakedefine FFTSCARF_FFT_OOURA
#if FFTSCARF_PRECISION_DEFAULT == 32
    #undef OOFLOAT_SINGLE
    #define OOFLOAT_SINGLE
#elif FFTSCARF_PRECISION_DEFAULT == 64
    #undef OOFLOAT_DOUBLE
    #define OOFLOAT_DOUBLE
#elif FFTSCARF_PRECISION_DEFAULT == 128
    #undef OOFLOAT_LONGDOUBLE
    #define OOFLOAT_LONGDOUBLE
#endif
#cmakedefine FFTSCARF_FFT_FFTREAL
//#cmakedefine FFTSCARF_FFT_DJBFFT
#cmakedefine FFTSCARF_FFT_DFT

#ifdef FFTSCARF_PLAN_PROTECTACCESS
#define FFTSCARF_PLAN_ACCESS_DECLARE boost::mutex m_plan_access;
#define FFTSCARF_PLAN_ACCESS_LOCK m_plan_access.lock();
#define FFTSCARF_PLAN_ACCESS_UNLOCK m_plan_access.unlock();
#else
#define FFTSCARF_PLAN_ACCESS_DECLARE
#define FFTSCARF_PLAN_ACCESS_LOCK
#define FFTSCARF_PLAN_ACCESS_UNLOCK
#endif

// Check if GPL is enforced on the user's software
#ifdef FFTSCARF_FFT_FFTW3
    // If the FFTW3 is used, the GPL is enforced on the software.
    #define FFTSCARF_LICENSE_GPLENFORCED
#endif


#include <string>
#include <map>
//#include <vector>
#include <list>
#include <limits>
#include <complex>
#include <algorithm>
#ifdef FFTSCARF_PLAN_PROTECTACCESS
#include <boost/thread/mutex.hpp>
#endif
#include <iostream>

/*! \brief General namespace of the wrapper library
 */
namespace fftscarf {
    //! Return the version of FFTScarf as a string.
    std::string version();

    //! Write some compile-time information to the given stream.
    void write_compile_info(std::ostream& out);

    //! Return the list of FFT libraries available.
    std::list<std::string> availableLibraries();

    //! Return the machine epsilon, that is, the difference between 1.0 and the next value representable by the floating-point type FloatType.
    template<typename FloatType>
    FloatType eps() {return std::numeric_limits<FloatType>::epsilon();}

    //! The pi value with the highest precision for a standard C++ float type, i.e. long double.
    static const long double pi = 3.141592653589793238462643383279502884L;
    static const long double pi2 = 2*3.141592653589793238462643383279502884L;

    //! Return true if N is a power of 2
    bool isPow2(unsigned int N);

    //! Return true if N is of the form 2^a * 3^b * 5^c
    bool isPow235(unsigned int N);

    //! Return true if N is odd
    static inline bool isOdd(unsigned int N){return N&1;}

    //! Return true if N is even
    static inline bool isEven(unsigned int N){return !isOdd(N);}

    //! Wrap the phase value in [-pi, +pi]
    template<typename FloatType>
    inline FloatType wrap(FloatType value){
        return std::arg(std::complex<FloatType>(std::cos(value),std::sin(value)));
    }
    //! Wrap the phase value in [-pi, +pi] (quick version, a few eps different from wrap)
    template<typename FloatType>
    inline FloatType wrapq(FloatType value){
        double pi = fftscarf::pi;        // It seems double is used somewhere for all precision
        long double pi2 = fftscarf::pi2; // Should always use the highest available precision

        value = value - int(value/pi2)*pi2;

        if(value>pi)
            value -= pi2;
        else if(value<-pi)
            value += pi2;

        return value;
    }

    //! Return a complex value from an array of two values.
    template<typename FloatType>
    inline std::complex<FloatType> make_complex(FloatType value[]){
        return std::complex<FloatType>(value[0], value[1]);
    }

    //! Return a complex value from the given real and imaginary parts.
    template<typename FloatType>
    inline std::complex<FloatType> make_complex(FloatType real, FloatType imag){
        return std::complex<FloatType>(real, imag);
    }

    /*! \brief Interface to be implemented by any FFT implementation
     * The basic idea isthe  to implement a "plan", which follows the same
     * definition as in FFTW3. Namely:
     * - A plan is either forward or backward (FFT or inverse FFT, respectively)
     * - It holds the trigonometric tables for computing an FFT of a given size.
     * - The size of the plan is not fixed and can be resized at run-time.
     * - The plan can be "executed" to tranform some given data by calling the member functions fft(.) or ifft(.)
     */
    class FFTPlanImplementation
    {
    protected:
        bool m_forward;
        int m_size;

    public:
        //! Simple constructor. By default, the plan compute the forward FFT (i.e. not the inverse FFT)
        FFTPlanImplementation(bool forward=true);
        //! A constructor for directly initializing the size of the FFT.
        FFTPlanImplementation(int n, bool forward=true);

        //! Resize the FFT plan to the given size (size restrictions may apply depending on the implementation)
        virtual void resize(int n)=0;
        //! Return the current size of the FFT plan
        int size(){return m_size;}

        // Interface to follow for implementations:
        // (these are "ghost" functions, because static polymorphism doesn't exist)
        //! Return the version of the FFT implementation
        static std::string version(){return "unknown FFT library version";}
        //! Return the name of the FFT implementation
        static std::string libraryName(){return "unknown FFT library";}

        // To execute the DFT computation:
        // (these are "ghost" functions, because template polymorphism doesn't exist)
        //! Compute the forward FFT
        template<typename TypeInContainer, typename TypeOutContainer>
        void fft(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1);
        //! Compute the inverse FFT
        template<typename TypeInContainer, typename TypeOutContainer>
        void ifft(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1);
    };

    /*! \brief Manage a collection of DFT plans with different sizes.
     * It basically avoids re-initializing FFT plans.
     */
    template<typename _FFTPlanType>
    class FFTPlanManager
    {
    public:
        typedef _FFTPlanType FFTPlanType;
    private:
        bool m_forward;
        std::map<int,FFTPlanType*> m_plans;

        inline bool has(int dftlen){
            return m_plans.find(dftlen)!=m_plans.end();
        }

    public:
        //! Build a plan manager for forward FFT or backward IFFT
        FFTPlanManager(bool forward=true){
            m_forward = forward;
        }
        ~FFTPlanManager(){
            for(size_t u=0; u<m_plans.size(); ++u)
                delete m_plans[u];
        }

        //! Return a plan of the given size
        inline FFTPlanType* plan(int dftlen){
            typename std::map<int,FFTPlanType*>::iterator dlit = m_plans.find(dftlen);
            if(dlit!=m_plans.end())
                return dlit->second;
            else
                return prepare(dftlen);
        }

        //! Prepare a plan with a specific size
        inline FFTPlanType* prepare(int dftlen){

            if(has(dftlen))
                return plan(dftlen);

            FFTPlanType* plan = new FFTPlanType(dftlen, m_forward);
            m_plans[dftlen] = plan;

            return plan;
        }
        //! Prepare plans of sizes between 2^p_min to 2^p_max
        inline void prepare_osf(int p_min, int p_max){
            for(int p=p_min; p<=p_max; ++p)
                prepare(std::pow(2, p));
        }

        //! Write some information about the plan manager
        void write_status(std::ostream& out){
            if(m_forward)
                out << "Forward FFT ";
            else
                out << "Backward IFFT ";
            out << "FFTPlanManager using " << FFTPlanType::libraryName();
            if(m_plans.empty())
                out << " without prepared sizes" << std::endl;
            else{
                out << " with sizes: ";
                for(typename std::map<int,FFTPlanType*>::iterator it=m_plans.begin(); it!=m_plans.end(); ++it)
                    out << it->first << " ";
                out << std::endl;
            }
        }

        //! Compute the forward FFT
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void fft(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1){
            get(dftlen)->fft(in, out, dftlen);
        }

        //! Compute the inverse FFT (Currently limited to even sizes)
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void ifft(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1){
            assert(isOdd(in.size()));                    // TODO Works only for even sizes!
            get((in.size()-1)*2)->ifft(in, out, winlen); // TODO Works only for even sizes!
        }
    };
}

#endif // __FFTSCARF_H__

// Include files of the FFT Implementations are concatenated here below
