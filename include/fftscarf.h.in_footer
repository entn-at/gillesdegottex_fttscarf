#ifndef __FFTSCARF_H_FOOTER__
#define __FFTSCARF_H_FOOTER__

namespace fftscarf {

    #ifdef FFTSCARF_PRECISION_SINGLE
        #ifndef DOXYGEN_SHOULD_SKIP_THIS
        extern FFTPlanManager<FFTPlanSingle> s_pm_plan_fwd_single;
        extern FFTPlanManager<FFTPlanSingle> s_pm_plan_bck_single;
        #endif
        //! Compute the forward FFT using single precision
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void rfftf(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1){
            s_pm_plan_fwd_single.rfft(in, out, dftlen);
        }

        //! Compute the inverse FFT using single precision (Currently limited to even sizes)
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void irfftf(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1){
            s_pm_plan_bck_single.irfft(in, out, winlen);
        }

        //! Return a single precision FFT plan of the given size
        inline FFTPlanSingle* plans(int dftlen){
            return s_pm_plan_fwd_single.plan(dftlen);
        }
        //! Return a single precision iFFT plan of the given size
        inline FFTPlanSingle* iplans(int dftlen){
            return s_pm_plan_bck_single.plan(dftlen);
        }
    #endif
    #ifdef FFTSCARF_PRECISION_DOUBLE
        #ifndef DOXYGEN_SHOULD_SKIP_THIS
        extern FFTPlanManager<FFTPlanDouble> s_pm_plan_fwd_double;
        extern FFTPlanManager<FFTPlanDouble> s_pm_plan_bck_double;
        #endif
        //! Compute the forward FFT using double precision
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void rfftd(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1){
            s_pm_plan_fwd_double.rfft(in, out, dftlen);
        }

        //! Compute the inverse FFT using double precision (Currently limited to even sizes)
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void irfftd(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1){
            s_pm_plan_bck_double.irfft(in, out, winlen);
        }

        //! Return a double precision FFT plan of the given size
        inline FFTPlanDouble* pland(int dftlen){
            return s_pm_plan_fwd_double.plan(dftlen);
        }
        //! Return a double precision iFFT plan of the given size
        inline FFTPlanDouble* ipland(int dftlen){
            return s_pm_plan_bck_double.plan(dftlen);
        }
    #endif
    #ifdef FFTSCARF_PRECISION_LONGDOUBLE
        #ifndef DOXYGEN_SHOULD_SKIP_THIS
        extern FFTPlanManager<FFTPlanLongDouble> s_pm_plan_fwd_long_double;
        extern FFTPlanManager<FFTPlanLongDouble> s_pm_plan_bck_long_double;
        #endif
        //! Compute the forward FFT using long double precision
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void rfftl(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1){
            s_pm_plan_fwd_long_double.rfft(in, out, dftlen);
        }

        //! Compute the inverse FFT using long double precision (Currently limited to even sizes)
        template<typename TypeInContainer, typename TypeOutContainer>
        inline void irfftl(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1){
            s_pm_plan_bck_long_double.irfft(in, out, winlen);
        }

        //! Return a long double precision FFT plan of the given size
        inline FFTPlanLongDouble* planl(int dftlen){
            return s_pm_plan_fwd_long_double.plan(dftlen);
        }
        //! Return a long double precision iFFT plan of the given size
        inline FFTPlanLongDouble* iplanl(int dftlen){
            return s_pm_plan_bck_long_double.plan(dftlen);
        }
    #endif
    #ifndef DOXYGEN_SHOULD_SKIP_THIS
    extern FFTPlanManager<FFTPlan> s_pm_plan_fwd; // TODO Avoid duplication of the default precision
    extern FFTPlanManager<FFTPlan> s_pm_plan_bck; // TODO Avoid duplication of the default precision
    #endif

    //! Compute the forward FFT using default precision
    template<typename TypeInContainer, typename TypeOutContainer>
    inline void rfft(const TypeInContainer& in, TypeOutContainer& out, int dftlen=-1){
        s_pm_plan_fwd.rfft(in, out, dftlen);
    }

    //! Compute the inverse FFT using default precision (Currently limited to even sizes)
    template<typename TypeInContainer, typename TypeOutContainer>
    inline void irfft(const TypeInContainer& in, TypeOutContainer& out, int winlen=-1){
        s_pm_plan_bck.irfft(in, out, winlen);
    }

    //! Return a default precision FFT plan of the given size
    inline FFTPlan* plan(int dftlen){
        return s_pm_plan_fwd.plan(dftlen);
    }
    //! Return a default precision iFFT plan of the given size
    inline FFTPlan* iplan(int dftlen){
        return s_pm_plan_bck.plan(dftlen);
    }
}

#endif // __FFTSCARF_H_FOOTER__
